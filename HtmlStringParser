package com.et.reader.parser;

import android.content.Context;
import android.text.Html;
import android.text.TextUtils;
import android.text.method.LinkMovementMethod;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.TextView;

import com.et.reader.activities.R;
import com.et.reader.util.constants.ETConstants;
import com.ext.services.Util;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

public class HtmlStringParser {
    private static Context context;

    public static ArrayList<View> getHtmlView(Context mContext, String inputText, OnTagEncountered listener, String... tags) {
        if (TextUtils.isEmpty(inputText)) {
            return null;
        }
        LayoutInflater mInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        context = mContext;

        ArrayList<View> returnViews = new ArrayList<View>();
        ArrayList<String> splitArray = getSplitStrings(inputText, mContext, tags);

        if (splitArray.get(1) == null) {
            returnViews.add(getTextViewForString(mInflater, splitArray.get(0)));
        } else {
            //First Blog for Text
            returnViews.add(getTextViewForString(mInflater, splitArray.get(0)));

            //Secong Blog for Html Tag
            if (listener.getView(splitArray.get(1)) != null) {
                returnViews.add(listener.getView(splitArray.get(1)));
            }

			/*
            if(splitArray.get(1).contains("<img"))
				returnViews.add(getImageViewForString(mInflater, splitArray.get(1)));
			else if(splitArray.get(1).contains("<video"))
				returnViews.add(getVideoViewForString(mContext, mInflater, splitArray.get(1)));
			else if(splitArray.get(1).contains("<iframe"))
				returnViews.add(getIframeViewForString(mInflater, splitArray.get(1)));
			 */
            //Recursive Calls for Rest String
            if (!TextUtils.isEmpty(splitArray.get(2))) {
                returnViews.addAll(getHtmlView(mContext, splitArray.get(2), listener, tags));
            }
        }

        return returnViews;
    }

    private static View getTextViewForString(LayoutInflater mInflater, String value) {
        View mViewReference = mInflater.inflate(R.layout.story_html_text_view, null, false);
        TextView mText = (TextView) mViewReference.findViewById(R.id.html_texview);
        mText.setMovementMethod(LinkMovementMethod.getInstance());
        mText.setText(Html.fromHtml(value));
        long tempCount = Util.getDataFromSharedPref("ET_APPFONTSIZE", context);
        mText.setTextSize(ETConstants.DEFAULT_STORY_FONT + tempCount);
        if (Util.getIntPrefrences(context, ETConstants.SETTINGS_THEME, 0) == 1)
            mText.setTextColor(context.getResources().getColor(R.color.storypage_story_white));
        else
            mText.setTextColor(context.getResources().getColor(R.color.storypage_story_black));
        return mViewReference;
    }


    private static String getyoutubeId(String value) {
        int start = value.indexOf("?v=");
        if (start == -1) {
            return value;
        } else {
            return value.substring(start + 3);
        }
    }

    private static ArrayList<String> getSplitStrings(String htmlString, Context mContext, String... tags) {

        //		String htmlString = loadJSONFromAsset(mContext);
        ArrayList<String> splitItems = new ArrayList<String>();
        TagPosition start;

        TagPosition[] taggedPositionsArray = new TagPosition[tags.length];
        for (int i = 0; i < tags.length; i++) {
            taggedPositionsArray[i] = TagPosition(htmlString.indexOf("<" + tags[i]), "</" + tags[i] + ">");
        }

		/*int startImg = htmlString.indexOf("<img");
        int startvideo = htmlString.indexOf("<video");
		int startIframe = htmlString.indexOf("<iframe");*/
        start = getTagMin(taggedPositionsArray);//TagPosition(startImg, "</img>"), TagPosition(startvideo, "</video>"), TagPosition(startIframe, "</iframe>"));
        if (start.getPosition() > 0) {

            int end;
            if (htmlString.substring(start.getPosition()).contains(start.getValue())) {
                int endWithTag = htmlString.substring(start.getPosition()).indexOf(start.getValue());

                int endWithoutTag = htmlString.substring(start.getPosition()).indexOf("/>");

                end = getMin(endWithoutTag, endWithTag);
                if (end == endWithTag) {
                    end = end + start.getValue().length() + start.getPosition();
                } else {
                    end = end + start.getPosition() + 2;
                }

            } else {
                end = htmlString.substring(start.getPosition()).indexOf("/>") + start.getPosition() + 2;
            }

            splitItems.add(htmlString.substring(0, start.getPosition()));
            splitItems.add(htmlString.substring(start.getPosition(), end));
            splitItems.add(htmlString.substring(end));
        } else {
            splitItems.add(htmlString);
            splitItems.add(null);
            splitItems.add(null);
        }

		/*switch (Html_Tag.video) {
        case video:

			break;
		case image:

			break;
		case iframe:

			break;
		}*/
        return splitItems;
    }

    private static int getMin(int... items) {
        int output = -1;
        for (int item : items) {
            if (item > 0) {
                if (output == -1) {
                    output = item;
                }
                if (output > item) {
                    output = item;
                }
            }
        }
        return output;
    }

    private static TagPosition getTagMin(TagPosition... items) {
        TagPosition output = TagPosition(-1, null);
        for (TagPosition item : items) {
            if (item.getPosition() > 0) {
                if (output.getPosition() == -1) {
                    output.setPosition(item.getPosition());
                    output.setValue(item.getValue());
                }
                if (output.getPosition() > item.getPosition()) {
                    output.setPosition(item.getPosition());
                    output.setValue(item.getValue());
                }
            }
        }
        return output;
    }

    private static TagPosition TagPosition(int i, String object) {
        return new TagPosition(i, object);
    }

    public static String loadJSONFromAsset(Context mContext) {
        String json;
        try {
            InputStream is = mContext.getAssets().open("foo.txt");
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");

            return json;

        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public interface OnTagEncountered {
        View getView(String element);
    }

    private static class TagPosition {
        private int position;
        private String value;

        public TagPosition(int position, String vlaue) {
            this.position = position;
            this.value = vlaue;
        }

        public int getPosition() {
            return position;
        }

        public void setPosition(int position) {
            this.position = position;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

    }
}
